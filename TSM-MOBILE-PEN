# Mobile Application Pentesting Process

Recon > Static Analysis > Dinamic Analysis > Reporting

# Recon:

# Fing information about the company
- Earnings Reports and press releases often contain info about mobile apps
# Find the target app on the Play Store or Apple Store
- Read reviews
- Enumerate who created the app
- Enumerate the different app versions and patch notes
- Enumerate the company's other apps

# Static Analysis

# Reading the application code via manual or automated tools to assess the security
- Looking for hardcoded strings, security misconfiguration, or additional targets extracted from the app

# Static analysis will sometimes results in the pentesting process being triggered, especially additional enumeration or fingerprinting
# Find a URL - Recon, enumerate, exploit etc.
- Many companies use other API gateways/path for mobile apps vs the traditional website
# Find an email/username - recon using phonebook.cz, etc.
# Find a storage bucket - recon, enumerate with cloud_enum

# Dynamic Analysis

# Running the application and manipulating it
- Intercepting traffic with proxies like burp suite/Proxyman
- Dumping memory from the application to check for insecurely stored secrets
- Checking local storage for files created at runtime
- Breaking SSL Pinning at Runtime

# Dynamic Analysis can often result in attacks related to the OWASP top Ten
- SQL injection, Cross-site Scripting, IDOR, XXE, etc.
- Note on XSS: you often will not get XSS in the mobile app itself, but sometimes this can affect the full version of the website.

# Reporting 

- Often contains executive summary as well as specific vulnerabilities discovered
- Write report with both OWASP Top Ten (Web) and OWASP Top Ten (Mobile) in mind
- Provide business with the criticality as well as steps to reproduce
- Remember to mention the positive security implementations

# Android Architecture

Android is based on the Linux Operating System, any linux commands will work here. Also the permission model.

# Dalvik vs the Android Runtime

- Every application is run in a virtual machine know as the Android Runtime
- Dalvik was the original runtime VM, and is still referenced to by the name Dalvik bytecode.
-- Dalvik is not  utilized in modern Android OS, and has been replaced by the ART (Android Runtime)

# Android identity and Access Management

# Each application has its own user for the application

# Android Identity and Access Mgmt, Continued

# Profiles
Separated App Data, useful for things like BYOD
Work Profile, Personal Profile, Always-on VPN

# Primary User
User created first time the fone is started, can only be removed by factory reset

# Secondary User
Additional users you can add to the device

# Guest User
Can only be one guest user at a time

# Kid Mode
Google kids spaces(Tablets only), usually vendor specific

# Android Architecture

# Major Layers:
- Linux Kernel
- Hardware Abstraction Layer
- Libraries (Native C or Android Runtime)
- Java API Layer
- System Apps

# Application Security and Signing

- Every android application can be reverse-engineered, rebuilt, re-signed and re-run
- This means an attacker can modify application functionality
- The source code is available by using a tool like JADX-GUI or Apktool

# Application signing

- Since anyone could modify an application and publish it to the Play Store, how do we ensure it's integrity?
R: PKI Public-key Infraestructure
- Today there are three methods of verifying signatures:
-- APK Signature scheme v1,2,3
-- In addition, google implemented google play signing which adds unique signatures to the apps
-- keytool, jarsigner, zipalign

# Instalação do Ambiente Windows

Android SDK - https://developer.android.com/studio/releases/platform-tools
APK Tool - https://ibotpeaches.github.io/Apktool/
Android Studio - 

# Instalação no Kali

https://github.com/Dewalt-arch/pimpmykali

Escolher a opção A - MAPT Course Setup

# Emulator Setup

# How to start ADB with port open on host machine Windows:

adb -a nodaemon server
# (if you receive an error that the port is already in use, kill the adb process - this will vary per your Operating System)

taskkill /f /t /im adb.exe
then run: adb -a nodaemon server
# From the networked machine, or VM run the following command to connect to the emulator via the newly opened port:

adb -H <host_machine_IP> -P 5037 shell

# Summary of How to Pull APK From Play Store:

# Download app from Play Store
# In terminal issue the following commands:
abd shell (this drops you into a shell on your emulator or physical phone)
pm list packages | grep <insertIdentifier> (this will display the name of the package installed on the phone, in our case we did grep injured, copy result for step 5 below)
pm path <insertpackagename> (list the file path of the package, copy the file path for step 7 below)
exit (exit the adb shell)
adb pull <insertPathToPackage> <insertNameOfNewFile>.apk (this will pull the apk from the file path on the phone and save it to whatever file name we want

# Android Manifest.xml

- Where the basics of the application are defined:
--minSDKVersion
--Permissions
--Activities
--Content Providers

# Permissions

- Defines what data and hardware components the app needs access to:
-- Camera
-- Contacts
-- Internet

Full list
https://developer.android.com/reference/android/Manifest.permission

# Activities
- Basically, UI elements or different "Screens" in the application
-- Some activities need to be protected, examples:
-- Account Details
-- Money Transfer Screens
-- Hidden Screens

- Often performed through intent-filters
- An exported="True" activity can be accessed from outside the application
