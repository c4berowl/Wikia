# Sample of code vulnerable to LFI

Code: php
if (isset($_GET['language'])) {
    include($_GET['language']);
}

# Outros parametros que podem ser vulner√°veis

include_once(), require(), require_once(), file_get_contents()

# The following is a basic example of how a GET parameter language is used to control what data is written to a page:

if(req.query.language) {
    fs.readFile(path.join(__dirname, req.query.language), function (err, data) {
        res.write(data);
    });
}

# The following example shows uses the language parameter to determine which directory it should pull the about.html page from:

Code: js
app.get("/about/:language", function(req, res) {
    res.render(`/${req.params.language}/about.html`);
});

# The following examples show how web applications for a Java web server may include local files based on the specified parameter, using the include function:

Code: jsp
<c:if test="${not empty param.language}">
    <jsp:include file="<%= request.getParameter('language') %>" />
</c:if>

#  The import function may also be used to render a local file or a URL, such as the following example:

Code: jsp
<c:import url= "<%= request.getParameter('language') %>"/>

# The Response.WriteFile function works very similarly to all of our earlier examples, as it takes a file path for its input and writes its content to the response.
# The path may be retrieved from a GET parameter for dynamic content loading, as follows:

Code: cs
@if (!string.IsNullOrEmpty(HttpContext.Request.Query['language'])) {
    <% Response.WriteFile("<% HttpContext.Request.Query['language'] %>"); %> 
}

# Furthermore, the @Html.Partial() function may also be used to render the specified file as part of the front-end template, similarly to what we saw earlier:

Code: cs
@Html.Partial(HttpContext.Request.Query['language'])
